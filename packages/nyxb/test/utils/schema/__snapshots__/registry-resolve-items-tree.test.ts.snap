// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`registryResolveItemTree > should resolve index 1`] = `
{
  "cssVars": {
    "dark": {},
    "light": {
      "radius": "0.5rem",
    },
  },
  "dependencies": [
    "tailwindcss-animate",
    "class-variance-authority",
    "lucide-react",
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-label",
  ],
  "devDependencies": [],
  "docs": "",
  "files": [
    {
      "content": "import { type ClassValue, clsx } from 'clsx'
import { twMerge } from 'tailwind-merge'

export function ny(...inputs: ClassValue[]) {
   return twMerge(clsx(inputs))
}
",
      "path": "lib/utils.ts",
      "type": "registry:lib",
    },
    {
      "content": "'use client'

import * as React from 'react'
import * as LabelPrimitive from '@radix-ui/react-label'
import { type VariantProps, cva } from 'class-variance-authority'

import { ny } from '~/lib/utils'

const labelVariants = cva(
   'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70',
)

const Label = React.forwardRef<
   React.ElementRef<typeof LabelPrimitive.Root>,
   React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
   VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
   <LabelPrimitive.Root
      ref={ref}
      className={ny(labelVariants(), className)}
      {...props}
   />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }
",
      "path": "ui/label.tsx",
      "target": "",
      "type": "registry:ui",
    },
  ],
  "tailwind": {
    "config": {
      "plugins": [
        "require("tailwindcss-animate")",
      ],
      "theme": {
        "extend": {
          "borderRadius": {
            "lg": "var(--radius)",
            "md": "calc(var(--radius) - 2px)",
            "sm": "calc(var(--radius) - 4px)",
          },
          "colors": {},
        },
      },
    },
  },
}
`;

exports[`registryResolveItemTree > should resolve items tree 1`] = `
{
  "cssVars": {},
  "dependencies": [
    "@radix-ui/react-slot",
  ],
  "devDependencies": [],
  "docs": "",
  "files": [
    {
      "content": "import * as React from 'react'
import { Slot } from '@radix-ui/react-slot'
import { type VariantProps, cva } from 'class-variance-authority'

import { ny } from '~/lib/utils'

const buttonVariants = cva(
   'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50',
   {
      variants: {
         variant: {
            default:
          'bg-primary text-primary-foreground shadow hover:bg-primary/90',
            destructive:
          'bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90',
            outline:
          'border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground',
            secondary:
          'bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80',
            ghost: 'hover:bg-accent hover:text-accent-foreground',
            link: 'text-primary underline-offset-4 hover:underline',
         },
         size: {
            default: 'h-9 px-4 py-2',
            sm: 'h-8 rounded-md px-3 text-xs',
            lg: 'h-10 rounded-md px-8',
            icon: 'h-9 w-9',
         },
      },
      defaultVariants: {
         variant: 'default',
         size: 'default',
      },
   },
)

export interface ButtonProps
   extends React.ButtonHTMLAttributes<HTMLButtonElement>,
   VariantProps<typeof buttonVariants> {
   asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
   ({ className, variant, size, asChild = false, ...props }, ref) => {
      const Comp = asChild ? Slot : 'button'
      return (
         <Comp
            className={ny(buttonVariants({ variant, size, className }))}
            ref={ref}
            {...props}
         />
      )
   },
)
Button.displayName = 'Button'

export { Button, buttonVariants }
",
      "path": "ui/button.tsx",
      "target": "",
      "type": "registry:ui",
    },
  ],
  "tailwind": {},
}
`;

exports[`registryResolveItemTree > should resolve multiple items tree 1`] = `
{
  "cssVars": {},
  "dependencies": [
    "@radix-ui/react-slot",
    "cmdk@1.0.0",
    "@radix-ui/react-dialog",
  ],
  "devDependencies": [],
  "docs": "",
  "files": [
    {
      "content": "import * as React from 'react'
import { Slot } from '@radix-ui/react-slot'
import { type VariantProps, cva } from 'class-variance-authority'

import { ny } from '~/lib/utils'

const buttonVariants = cva(
   'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',
   {
      variants: {
         variant: {
            default: 'bg-primary text-primary-foreground hover:bg-primary/90',
            destructive:
          'bg-destructive text-destructive-foreground hover:bg-destructive/90',
            outline:
          'border border-input bg-background hover:bg-accent hover:text-accent-foreground',
            secondary:
          'bg-secondary text-secondary-foreground hover:bg-secondary/80',
            ghost: 'hover:bg-accent hover:text-accent-foreground',
            link: 'text-primary underline-offset-4 hover:underline',
         },
         size: {
            default: 'h-10 px-4 py-2',
            sm: 'h-9 rounded-md px-3',
            lg: 'h-11 rounded-md px-8',
            icon: 'h-10 w-10',
         },
      },
      defaultVariants: {
         variant: 'default',
         size: 'default',
      },
   },
)

export interface ButtonProps
   extends React.ButtonHTMLAttributes<HTMLButtonElement>,
   VariantProps<typeof buttonVariants> {
   asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
   ({ className, variant, size, asChild = false, ...props }, ref) => {
      const Comp = asChild ? Slot : 'button'
      return (
         <Comp
            className={ny(buttonVariants({ variant, size, className }))}
            ref={ref}
            {...props}
         />
      )
   },
)
Button.displayName = 'Button'

export { Button, buttonVariants }
",
      "path": "ui/button.tsx",
      "target": "",
      "type": "registry:ui",
    },
    {
      "content": "import * as React from 'react'

import { ny } from '~/lib/utils'

export interface InputProps
   extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
   ({ className, type, ...props }, ref) => {
      return (
         <input
            type={type}
            className={ny(
               'border-input bg-background ring-offset-background placeholder:text-muted-foreground focus-visible:ring-ring flex h-10 w-full rounded-md border px-3 py-2 text-sm file:border-0 file:bg-transparent file:text-sm file:font-medium focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
               className,
            )}
            ref={ref}
            {...props}
         />
      )
   },
)
Input.displayName = 'Input'

export { Input }
",
      "path": "ui/input.tsx",
      "target": "",
      "type": "registry:ui",
    },
    {
      "content": "'use client'

import * as React from 'react'
import type { DialogProps } from '@radix-ui/react-dialog'
import { Command as CommandPrimitive } from 'cmdk'
import { Search } from 'lucide-react'

import { ny } from '~/lib/utils'
import { Dialog, DialogContent } from '~/registry/default/ui/dialog'

const Command = React.forwardRef<
   React.ElementRef<typeof CommandPrimitive>,
   React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
   <CommandPrimitive
      ref={ref}
      className={ny(
         'bg-popover text-popover-foreground flex size-full flex-col overflow-hidden rounded-md',
         className,
      )}
      {...props}
   />
))
Command.displayName = CommandPrimitive.displayName

interface CommandPrimitiveProps
   extends React.ComponentProps<typeof CommandPrimitive> {}

interface CommandDialogProps extends DialogProps, CommandPrimitiveProps {}

function CommandDialog({
   children,
   shouldFilter,
   filter,
   ...props
}: CommandDialogProps) {
   return (
      <Dialog {...props}>
         <DialogContent className="overflow-hidden p-0 shadow-lg">
            <Command
               shouldFilter={shouldFilter}
               filter={filter}
               className="[&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:size-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:size-5"
            >
               {children}
            </Command>
         </DialogContent>
      </Dialog>
   )
}

const CommandInput = React.forwardRef<
   React.ElementRef<typeof CommandPrimitive.Input>,
   React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
   <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
      <Search className="mr-2 size-4 shrink-0 opacity-50" />
      <CommandPrimitive.Input
         ref={ref}
         className={ny(
            'placeholder:text-muted-foreground flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none disabled:cursor-not-allowed disabled:opacity-50',
            className,
         )}
         {...props}
      />
   </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
   React.ElementRef<typeof CommandPrimitive.List>,
   React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
   <CommandPrimitive.List
      ref={ref}
      className={ny('max-h-[300px] overflow-y-auto overflow-x-hidden', className)}
      {...props}
   />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
   React.ElementRef<typeof CommandPrimitive.Empty>,
   React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
   <CommandPrimitive.Empty
      ref={ref}
      className="py-6 text-center text-sm"
      {...props}
   />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
   React.ElementRef<typeof CommandPrimitive.Group>,
   React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
   <CommandPrimitive.Group
      ref={ref}
      className={ny(
         'text-foreground [&_[cmdk-group-heading]]:text-muted-foreground overflow-hidden p-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium',
         className,
      )}
      {...props}
   />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
   React.ElementRef<typeof CommandPrimitive.Separator>,
   React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
   <CommandPrimitive.Separator
      ref={ref}
      className={ny('bg-border -mx-1 h-px', className)}
      {...props}
   />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
   React.ElementRef<typeof CommandPrimitive.Item>,
   React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
   <CommandPrimitive.Item
      ref={ref}
      className={ny(
         'data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50',
         className,
      )}
      {...props}
   />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

function CommandShortcut({
   className,
   ...props
}: React.HTMLAttributes<HTMLSpanElement>) {
   return (
      <span
         className={ny(
            'text-muted-foreground ml-auto text-xs tracking-widest',
            className,
         )}
         {...props}
      />
   )
}
CommandShortcut.displayName = 'CommandShortcut'

export {
   Command,
   CommandDialog,
   CommandInput,
   CommandList,
   CommandEmpty,
   CommandGroup,
   CommandItem,
   CommandShortcut,
   CommandSeparator,
}
",
      "path": "ui/command.tsx",
      "target": "",
      "type": "registry:ui",
    },
    {
      "content": "'use client'

import * as React from 'react'
import * as DialogPrimitive from '@radix-ui/react-dialog'
import { X } from 'lucide-react'

import { ny } from '~/lib/utils'

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
   React.ElementRef<typeof DialogPrimitive.Overlay>,
   React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
   <DialogPrimitive.Overlay
      ref={ref}
      className={ny(
         'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0  fixed inset-0 z-50 bg-black/80',
         className,
      )}
      {...props}
   />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
   React.ElementRef<typeof DialogPrimitive.Content>,
   React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
   <DialogPortal>
      <DialogOverlay />
      <DialogPrimitive.Content
         ref={ref}
         className={ny(
            'bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] fixed left-1/2 top-1/2 z-50 grid w-full max-w-lg -translate-x-1/2 -translate-y-1/2 gap-4 border p-6 shadow-lg duration-200 sm:rounded-lg',
            className,
         )}
         {...props}
      >
         {children}
         <DialogPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute right-4 top-4 rounded-sm opacity-70 transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:pointer-events-none">
            <X className="size-4" />
            <span className="sr-only">Close</span>
         </DialogPrimitive.Close>
      </DialogPrimitive.Content>
   </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

function DialogHeader({
   className,
   ...props
}: React.HTMLAttributes<HTMLDivElement>) {
   return (
      <div
         className={ny(
            'flex flex-col space-y-1.5 text-center sm:text-left',
            className,
         )}
         {...props}
      />
   )
}
DialogHeader.displayName = 'DialogHeader'

function DialogFooter({
   className,
   ...props
}: React.HTMLAttributes<HTMLDivElement>) {
   return (
      <div
         className={ny(
            'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',
            className,
         )}
         {...props}
      />
   )
}
DialogFooter.displayName = 'DialogFooter'

const DialogTitle = React.forwardRef<
   React.ElementRef<typeof DialogPrimitive.Title>,
   React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
   <DialogPrimitive.Title
      ref={ref}
      className={ny(
         'text-lg font-semibold leading-none tracking-tight',
         className,
      )}
      {...props}
   />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
   React.ElementRef<typeof DialogPrimitive.Description>,
   React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
   <DialogPrimitive.Description
      ref={ref}
      className={ny('text-muted-foreground text-sm', className)}
      {...props}
   />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
   Dialog,
   DialogPortal,
   DialogOverlay,
   DialogClose,
   DialogTrigger,
   DialogContent,
   DialogHeader,
   DialogFooter,
   DialogTitle,
   DialogDescription,
}
",
      "path": "ui/dialog.tsx",
      "target": "",
      "type": "registry:ui",
    },
  ],
  "tailwind": {},
}
`;
